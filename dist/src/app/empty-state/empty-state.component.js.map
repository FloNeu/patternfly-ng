{"version":3,"file":"empty-state.component.js","sourceRoot":"","sources":["../../../../src/app/empty-state/empty-state.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAOuB;AAGvB,2DAAwD;AAExD,iCAAsD;AAEtD;;GAEG;AAOH,IAAa,mBAAmB;IAU9B;QAP0B,mBAAc,GAAG,IAAI,mBAAY,EAAE,CAAC;QAE9D,kBAAa,GAAG;YACd,KAAK,EAAE,oBAAoB;SACR,CAAC;IAItB,CAAC;IAED,iBAAiB;IAEjB,sCAAQ,GAAR;QACE,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,uCAAS,GAAT;QACE,8BAA8B;QAC9B,EAAE,CAAC,CAAC,CAAC,gBAAO,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC3C,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,CAAC;IACH,CAAC;IAED,yCAAW,GAAX;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;YAC9B,iBAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAC5C,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,MAAM,GAAG,kBAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC9C,CAAC;QACD,IAAI,CAAC,UAAU,GAAG,kBAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC3C,CAAC;IAED,mBAAmB;IAEnB,0CAAY,GAAZ,UAAa,MAAc;QACzB,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC,CAAC;YACvC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACnC,CAAC;IACH,CAAC;IACH,0BAAC;AAAD,CAAC,AA1CD,IA0CC;AAzCU;IAAR,YAAK,EAAE;8BAAS,qCAAgB;mDAAC;AAER;IAAzB,aAAM,CAAC,gBAAgB,CAAC;;2DAAqC;AAHnD,mBAAmB;IAN/B,gBAAS,CAAC;QACT,aAAa,EAAE,wBAAiB,CAAC,IAAI;QACrC,QAAQ,EAAE,kBAAkB;QAC5B,SAAS,EAAE,CAAC,8BAA8B,CAAC;QAC3C,WAAW,EAAE,8BAA8B;KAC5C,CAAC;;GACW,mBAAmB,CA0C/B;AA1CY,kDAAmB","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { Action } from '../models/action';\nimport { EmptyStateConfig } from './empty-state-config';\n\nimport { cloneDeep, defaults, isEqual } from 'lodash';\n\n/**\n * Empty state component.\n */\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-empty-state',\n  styleUrls: ['./empty-state.component.less'],\n  templateUrl: './empty-state.component.html'\n})\nexport class EmptyStateComponent implements OnInit {\n  @Input() config: EmptyStateConfig;\n\n  @Output('onActionSelect') onActionSelect = new EventEmitter();\n\n  defaultConfig = {\n    title: 'No Items Available'\n  } as EmptyStateConfig;\n  prevConfig: EmptyStateConfig;\n\n  constructor() {\n  }\n\n  // Initialization\n\n  ngOnInit(): void {\n    this.setupConfig();\n  }\n\n  ngDoCheck(): void {\n    // Do a deep compare on config\n    if (!isEqual(this.config, this.prevConfig)) {\n      this.setupConfig();\n    }\n  }\n\n  setupConfig(): void {\n    if (this.config !== undefined) {\n      defaults(this.config, this.defaultConfig);\n    } else {\n      this.config = cloneDeep(this.defaultConfig);\n    }\n    this.prevConfig = cloneDeep(this.config);\n  }\n\n  // Action functions\n\n  handleAction(action: Action): void {\n    if (action && action.disabled !== true) {\n      this.onActionSelect.emit(action);\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}