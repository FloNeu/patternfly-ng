{"version":3,"file":"toast-notification-list.component.js","sourceRoot":"","sources":["../../../../src/app/notification/toast-notification-list.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAOuB;AAWvB,IAAa,8BAA8B;IAQzC;QAJ0B,mBAAc,GAAG,IAAI,mBAAY,EAAE,CAAC;QACrC,kBAAa,GAAG,IAAI,mBAAY,EAAE,CAAC;QACjC,oBAAe,GAAG,IAAI,mBAAY,EAAE,CAAC;IAGhE,CAAC;IAED,iBAAiB;IAEjB,iDAAQ,GAAR;IACA,CAAC;IAED,mBAAmB;IAEnB,qDAAY,GAAZ,UAAa,MAAyB;QACpC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;IAED,oDAAW,GAAX,UAAY,MAAyB;QACnC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAED,4DAAmB,GAAnB,UAAoB,MAAyB;QAC3C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IACH,qCAAC;AAAD,CAAC,AA7BD,IA6BC;AA5BU;IAAR,YAAK,EAAE;;qEAA+B;AAC9B;IAAR,YAAK,EAAE;;iEAAoB;AAEF;IAAzB,aAAM,CAAC,gBAAgB,CAAC;;sEAAqC;AACrC;IAAxB,aAAM,CAAC,eAAe,CAAC;;qEAAoC;AACjC;IAA1B,aAAM,CAAC,iBAAiB,CAAC;;uEAAsC;AANrD,8BAA8B;IAN1C,gBAAS,CAAC;QACT,aAAa,EAAE,wBAAiB,CAAC,IAAI;QACrC,QAAQ,EAAE,8BAA8B;QACxC,SAAS,EAAE,CAAC,0CAA0C,CAAC;QACvD,WAAW,EAAE,0CAA0C;KACxD,CAAC;;GACW,8BAA8B,CA6B1C;AA7BY,wEAA8B","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { Notification } from './notification';\nimport { NotificationEvent } from './notification-event';\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-toast-notification-list',\n  styleUrls: ['./toast-notification-list.component.less'],\n  templateUrl: './toast-notification-list.component.html'\n})\nexport class ToastNotificationListComponent implements OnInit {\n  @Input() notifications: Notification[];\n  @Input() showClose: boolean;\n\n  @Output('onActionSelect') onActionSelect = new EventEmitter();\n  @Output('onCloseSelect') onCloseSelect = new EventEmitter();\n  @Output('onViewingChange') onViewingChange = new EventEmitter();\n\n  constructor() {\n  }\n\n  // Initialization\n\n  ngOnInit(): void {\n  }\n\n  // Action functions\n\n  handleAction($event: NotificationEvent): void {\n    this.onActionSelect.emit($event);\n  }\n\n  handleClose($event: NotificationEvent): void {\n    this.onCloseSelect.emit($event);\n  }\n\n  handleViewingChange($event: NotificationEvent) {\n    this.onViewingChange.emit($event);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}