{"version":3,"file":"notification.service.js","sourceRoot":"","sources":["../../../../src/app/notification/notification.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Action } from '../models/action';\nimport { Notification } from './notification';\nimport { NotificationType } from './notification-type';\n\n/**\n * Notification service used to notify user about important events in the application.\n *\n * ## Configuring the service\n *\n * You can configure the service with: setDelay, setVerbose and setPersist.\n *\n * ### Notifications.setDelay\n * Set the delay after which the notification is dismissed. The argument of this method expects miliseconds. Default\n * delay is 8000 ms.\n *\n * ### Notifications.setVerbose\n * Set the verbose mode to on (default) or off. During the verbose mode, each notification is printed in the console.\n *\n * ### Notifications.setPersist\n * Sets persist option for particular modes. Notification with persistent mode won't be dismissed after delay, but has\n * to be closed manually with the close button. By default, the \"error\" and \"httpError\" modes are set to persistent.\n * The input is an object in format {mode: persistValue}.\n */\n@Injectable()\nexport class NotificationService {\n\n  // time (in ms) the notifications are shown\n  delay: number = 8000;\n  modes: any = {};\n  notifications: any = {};\n  persist: any = {'error': true, 'httpError': true};\n  verbose: boolean = false;\n\n  constructor() {\n    this.notifications.data = [] as Notification[];\n    this.modes = [\n      {info: { type: NotificationType.INFO, header: 'Info!', log: 'info'}},\n      {success: { type: NotificationType.SUCCESS, header: 'Success!', log: 'info'}},\n      {error: { type: NotificationType.DANGER, header: 'Error!', log: 'error'}},\n      {warn: { type: NotificationType.WARNING, header: 'Warning!', log: 'warn'}}\n    ];\n    this.modes.forEach((mode: any, index: number) => {\n      this.notifications[index] = this.createNotifyMethod(index);\n    });\n  }\n\n  private createNotifyMethod(index: number): any {\n    return (message: string, header: string, persistent: boolean, primaryAction: Action, moreActions: Action[]) => {\n      if (header != undefined) {\n        header = this.modes[index].header;\n      }\n      if (persistent != undefined) {\n        persistent = this.persist[index];\n      }\n      this.notifications.message(this.modes[index].type, header, message, persistent, primaryAction, moreActions);\n      if (this.verbose) {\n        console.log(message);\n      }\n    };\n  }\n\n  getNotifications(): Notification[] {\n    return this.notifications.data;\n  }\n\n  httpError(message: string, httpResponse: any): void {\n    message += ' (' + (httpResponse.data.message || httpResponse.data.cause\n        || httpResponse.data.cause || httpResponse.data.errorMessage) + ')';\n    this.message('danger', 'Error!', message, this.persist.httpError, null, null);\n    if (this.verbose) {\n      console.log(message);\n    }\n  }\n\n  message(type: string, header: string, message: string, isPersistent: boolean,\n          primaryAction: Action, moreActions: Action[]): void {\n    let notification = {\n      header: header,\n      isPersistent: isPersistent,\n      isViewing: false,\n      message : message,\n      moreActions: moreActions,\n      primaryAction: primaryAction,\n      showClose: false,\n      type: type,\n      visible: true\n    } as Notification;\n    this.notifications.data.push(notification);\n\n    if (notification.isPersistent !== true) {\n      notification.isViewing = false;\n      setTimeout(() => {\n        notification.visible = false;\n        if (!notification.isViewing) {\n          this.remove(notification);\n        }\n      }, this.delay);\n    }\n  }\n\n  remove(notification: Notification): void {\n    var index = this.notifications.data.indexOf(notification);\n    if (index !== -1) {\n      this.removeIndex(index);\n    }\n  }\n\n  removeIndex(index: number): void {\n    this.notifications.data.splice(index, 1);\n  }\n\n  setDelay(delay: number): void {\n    this.delay = delay;\n  }\n\n  setPersist = function (persist: boolean): void {\n    this.persist = persist;\n  }\n\n  setVerbose(verbose: boolean): void {\n    this.verbose = verbose;\n  }\n\n  setViewing(notification: Notification, isViewing: boolean): void {\n    notification.isViewing = isViewing;\n    if (isViewing !== true && notification.visible !== true) {\n      this.remove(notification);\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}