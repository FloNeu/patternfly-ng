{"version":3,"file":"list-expand-toggle.component.js","sourceRoot":"","sources":["../../../../src/app/list/list-expand-toggle.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,SAAS,EACT,KAAK,EAEL,WAAW,EACX,iBAAiB,EAClB,MAAM,eAAe,CAAC;AAEvB;;;;GAIG;AAMH,IAAa,yBAAyB;IAgBpC;;OAEG;IACH;IACA,CAAC;IAED,iBAAiB;IAEjB;;OAEG;IACH,4CAAQ,GAAR;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;YAC5B,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;QACzE,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC;YAChC,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;QAC7E,CAAC;IACH,CAAC;IAED,UAAU;IAEV;;;;OAIG;IACK,kDAAc,GAAtB;QACE,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrF,CAAC;IAED;;OAEG;IACK,gDAAY,GAApB;QACE,2BAA2B;QAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACrE,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;YACnC,MAAM,CAAC;QACT,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QACnC,IAAI,CAAC,IAAI,CAAC,cAAc,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;IACvD,CAAC;IACH,gCAAC;AAAD,CAAC,AA3DD,IA2DC;AAvDU;IAAR,KAAK,EAAE;;2DAAkB;AAKjB;IAAR,KAAK,EAAE;;uDAAW;AAKV;IAAR,KAAK,EAAE;8BAAW,WAAW;2DAAM;AAdzB,yBAAyB;IALrC,SAAS,CAAC;QACT,aAAa,EAAE,iBAAiB,CAAC,IAAI;QACrC,QAAQ,EAAE,yBAAyB;QACnC,WAAW,EAAE,qCAAqC;KACnD,CAAC;;GACW,yBAAyB,CA2DrC;SA3DY,yBAAyB","sourcesContent":["import {\n  Component,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\n\n/**\n * List compund expansion toggle component.\n *\n * This is intended to be used with the list component's itemExpandTemplate\n */\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-list-expand-toggle',\n  templateUrl: './list-expand-toggle.component.html'\n})\nexport class ListExpandToggleComponent implements OnInit {\n  /**\n   * The id of the template used to contain expandable content for each item\n   */\n  @Input() expandId: string;\n\n  /**\n   * The items displayed in the current list item\n   */\n  @Input() item: any;\n\n  /**\n   * The name of the template containing elements shown in the toggle body\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * The default constructor\n   */\n  constructor() {\n  }\n\n  // Initialization\n\n  /**\n   *  Setup component configuration upon initialization\n   */\n  ngOnInit(): void {\n    if (this.item === undefined) {\n      throw new Error('ListCompoundToggleComponent: item attribute not set');\n    }\n    if (this.expandId === undefined) {\n      throw new Error('ListCompoundToggleComponent: expandId attribute not set');\n    }\n  }\n\n  // Actions\n\n  /**\n   * Test if item is expanded based on given expand item ID\n   *\n   * @returns {boolean} True if item is expanded\n   */\n  private isItemExpanded(): boolean {\n    return (this.item.isItemExpanded === true && this.item.expandId === this.expandId);\n  }\n\n  /**\n   * Toggle expand item open/close\n   */\n  private toggleExpand(): void {\n    // Item may already be open\n    if (this.item.isItemExpanded && this.item.expandId !== this.expandId) {\n      this.item.expandId = this.expandId;\n      return;\n    }\n    this.item.expandId = this.expandId;\n    this.item.isItemExpanded = !this.item.isItemExpanded;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}