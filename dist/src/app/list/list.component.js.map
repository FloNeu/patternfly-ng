{"version":3,"file":"list.component.js","sourceRoot":"","sources":["../../../../build/src/app/list/list.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { Action } from '../action/action';\nimport { ListConfig } from './list-config';\nimport { ListEvent } from './list-event';\n\nimport { cloneDeep, defaults, isEqual, without } from 'lodash';\n\n/**\n * List component\n *\n * For items, use a template named itemTemplate to contain content for each item. For each item in the items array, the\n * expansion can be disabled by setting disabled to true on the item. If using actions, use a template named\n * actionTemplate to contain expandable content for the actions of each item. If using expand items, use a template\n * named itemExpandedTemplate to contain expandable content for each item.\n */\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-list',\n  styles: [`.pfng-list-cb-placeholder{width:12px}.pfng-list-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1}.pfng-list-expand-placeholder{width:8px}.pfng-list-expansion{position:relative}.pfng-list-heading{pointer-events:none}@media (max-width:992px){.pfng-list-heading{display:none}}.pfng-list-heading:hover{background-color:#fff}.pfng-list-heading i{pointer-events:auto}.pfng-list-heading .list-pf-title{font-size:12px;font-weight:400}.pfng-list-heading .list-pf-chevron+.list-pf-content,.pfng-list-heading .list-pf-select+.list-pf-content{border-left:none}.pfng-list-item.disabled,.pfng-list-item.disabled:focus,.pfng-list-item.disabled:hover{background-color:#f5f5f5;color:#bbb;cursor:not-allowed}`],\n  template: `<div class=\"list-pf\" *ngIf=\"!itemsEmpty\"><div class=\"pfng-list-item list-pf-item {{item?.itemStyleClass}}\" *ngFor=\"let item of items; let i = index\" [ngClass]=\"{'active': isSelected(item) || item.isItemExpanded, 'pfng-list-heading': config.useHeading && i === 0}\"><div class=\"list-pf-container\"><div *ngIf=\"config.useHeading && i === 0; then showExpandHeader else showExpand\"></div><ng-template #showExpandHeader><div class=\"list-pf-chevron\" *ngIf=\"config.useExpandItems\"><div class=\"pfng-list-expand-placeholder\"></div></div></ng-template><ng-template #showExpand><div class=\"list-pf-chevron\" *ngIf=\"config.useExpandItems\"><div class=\"pfng-list-expand-placeholder\" *ngIf=\"item.hideExpandToggle === true\"></div><span class=\"fa fa-angle-right\" *ngIf=\"item.hideExpandToggle !== true\" (click)=\"toggleExpandArea(item)\" [ngClass]=\"{'fa-angle-down': item.expanded && item.expandId === undefined}\"></span></div></ng-template><div *ngIf=\"(config.useHeading && i === 0); then showCheckboxHeader else showCheckbox\"></div><ng-template #showCheckboxHeader><div class=\"list-pf-select\" *ngIf=\"config.showCheckbox\"><div class=\"pfng-list-cb-placeholder\"></div></div></ng-template><ng-template #showCheckbox><div class=\"list-pf-select\" *ngIf=\"config.showCheckbox\"><input type=\"checkbox\" value=\"item.selected\" [(ngModel)]=\"item.selected\" (ngModelChange)=\"checkboxChange(item)\"></div></ng-template><div class=\"list-pf-content list-pf-content-flex\"><div class=\"pfng-list-content\" (click)=\"itemClick($event, item)\" (dblclick)=\"dblClick($event, item)\"><ng-template *ngIf=\"itemTemplate\" [ngTemplateOutlet]=\"itemTemplate\" [ngOutletContext]=\"{ item: item, index: i }\"></ng-template></div><div class=\"list-pf-actions\"><ng-template *ngIf=\"actionTemplate\" [ngTemplateOutlet]=\"actionTemplate\" [ngOutletContext]=\"{ item: item, index: i }\"></ng-template></div></div></div><div class=\"pfng-list-expansion list-pf-expansion collapse in\" *ngIf=\"!(config.useHeading && i === 0) && expandTemplate && item.expanded\"><div class=\"list-pf-container\" tabindex=\"0\"><div class=\"list-pf-content\"><div class=\"close\" *ngIf=\"config.hideClose !== true\"><span class=\"pficon pficon-close\" (click)=\"closeExpandArea(item)\"></span></div><ng-template [ngTemplateOutlet]=\"expandTemplate\" [ngOutletContext]=\"{ item: item, index: i }\"></ng-template></div></div></div></div></div><pfng-empty-state *ngIf=\"itemsEmpty\" [config]=\"config.emptyStateConfig\" (onActionSelect)=\"handleAction($event)\"></pfng-empty-state>`\n})\nexport class ListComponent implements OnInit {\n  /**\n   * The name of the template containing actions for each item\n   */\n  @Input() actionTemplate: TemplateRef<any>;\n\n  /**\n   * The list config containing component properties\n   */\n  @Input() config: ListConfig;\n\n  /**\n   * An array of items to display in the list\n   */\n  @Input() items: any[];\n\n  /**\n   * The name of the template containing items for each item\n   */\n  @Input() itemTemplate: TemplateRef<any>;\n\n  /**\n   * The name of the template used to contain expandable content for each item\n   */\n  @Input() expandTemplate: TemplateRef<any>;\n\n  /**\n   * The event emitted when an action (e.g., button, kebab, etc.) has been selected\n   */\n  @Output('onActionSelect') onActionSelect = new EventEmitter();\n\n  /**\n   * The event emitted when a checkbox has been selected\n   */\n  @Output('onCheckboxChange') onCheckboxChange = new EventEmitter();\n\n  /**\n   * The event emitted when an item has been clicked\n   */\n  @Output('onClick') onClick = new EventEmitter();\n\n  /**\n   * The event emitted when an item is double clicked\n   */\n  @Output('onDblClick') onDblClick = new EventEmitter();\n\n  /**\n   * The event emitted when an item is no longer dragged\n   */\n  // @Output('onDragEnd') onDragEnd = new EventEmitter();\n\n  /**\n   * The event emitted when an item is being dragged\n   */\n  // @Output('onDragMoved') onDragMoved = new EventEmitter();\n\n  /**\n   * The event emitted when an item begins to be dragged\n   */\n  // @Output('onDragStart') onDragStart = new EventEmitter();\n\n  /**\n   * The event emitted when an item has been selected\n   */\n  @Output('onSelect') onSelect = new EventEmitter();\n\n  /**\n   * The event emitted when an item selection has been changed\n   */\n  @Output('onSelectionChange') onSelectionChange = new EventEmitter();\n\n  private defaultConfig = {\n    checkDisabled: false,\n    dblClick: false,\n    dragEnabled: false,\n    hideClose: false,\n    multiSelect: false,\n    selectedItems: [],\n    selectionMatchProp: 'uuid',\n    selectItems: false,\n    showCheckbox: true,\n    useExpandItems: false\n  } as ListConfig;\n  private dragItem: any;\n  private _itemsEmpty: boolean = true;\n  private prevConfig: ListConfig;\n\n  /**\n   * The default constructor\n   */\n  constructor() {\n  }\n\n  // Initialization\n\n  /**\n   *  Setup component configuration upon initialization\n   */\n  ngOnInit(): void {\n    this.setupConfig();\n  }\n\n  /**\n   *  Check if the component config has changed\n   */\n  ngDoCheck(): void {\n    // Do a deep compare on config\n    if (!isEqual(this.config, this.prevConfig)) {\n      this.setupConfig();\n    }\n    this._itemsEmpty = !(this.items !== undefined && this.items.length > 0);\n  }\n\n  /**\n   * Set up default config\n   */\n  protected setupConfig(): void {\n    if (this.config !== undefined) {\n      defaults(this.config, this.defaultConfig);\n    } else {\n      this.config = cloneDeep(this.defaultConfig);\n    }\n    if ((this.config.multiSelect === undefined || this.config.multiSelect === false)\n        && this.config.selectedItems && this.config.selectedItems.length > 0) {\n      this.config.selectedItems = [this.config.selectedItems[0]];\n    }\n    if (this.config.selectItems && this.config.showCheckbox) {\n      throw new Error('ListComponent - Illegal use: ' +\n        'Cannot use both item select and click selection at the same time.');\n    }\n    this.prevConfig = cloneDeep(this.config);\n  }\n\n  // Getters & setters\n\n  /**\n   * Get the flag indicating list has no items\n   *\n   * @returns {boolean} The flag indicating list has no items\n   */\n  get itemsEmpty(): boolean {\n    return this._itemsEmpty;\n  }\n\n  // Actions\n\n  private handleAction(action: Action): void {\n    if (action && action.disabled !== true) {\n      this.onActionSelect.emit(action);\n    }\n  }\n\n  // Checkbox\n\n  private checkboxChange(item: any): void {\n    this.onCheckboxChange.emit({\n      item: item\n    } as ListEvent);\n  }\n\n  private isSelected(item: any): boolean {\n    let matchProp = this.config.selectionMatchProp;\n    let selected = false;\n\n    if (this.config.showCheckbox) {\n      selected = item.selected;\n    } else if (this.config.selectItems !== undefined) {\n      this.config.selectedItems.forEach((itemObj) => {\n        if (itemObj[matchProp] === item[matchProp]) {\n          selected = true;\n        }\n      });\n    }\n    return selected;\n  }\n\n  // Drag and drop\n\n  private dragEnd(): void {\n    /* Todo: dnd not implemeneted\n    this.onDragEnd.emit({\n      item: this.dragItem\n    } as ListEvent);\n    */\n  }\n\n  private dragMoved(): void {\n    /* Todo: dnd not implemeneted\n    this.onDragMoved.emit({\n      item: this.dragItem\n    } as ListEvent);\n    */\n  }\n\n  private isDragOriginal(item: any): boolean {\n    return (item === this.dragItem);\n  }\n\n  private dragStart(item: any): void {\n    this.dragItem = item;\n    /* Todo: dnd not implemeneted\n    this.onDragStart.emit({\n      item: this.dragItem\n    } as ListEvent);\n    */\n  }\n\n  // Item Selection\n\n  private itemClick($event: MouseEvent, item: any): void {\n    let alreadySelected;\n    let selectionChanged = false;\n\n    // Ignore disabled item clicks completely\n    if (item.disabled === true) {\n      return;\n    }\n\n    if (this.config.selectItems) {\n      if (this.config.multiSelect && !this.config.dblClick) {\n        for (let i = 0; i < this.config.selectedItems.length - 1; i++) {\n          if (this.config.selectedItems[i] === item) {\n            alreadySelected = true;\n            break;\n          }\n        }\n        if (alreadySelected) {\n          // already selected so deselect\n          this.config.selectedItems = without(this.config.selectedItems, item);\n        } else {\n          // add the item to the selected items\n          this.config.selectedItems.push(item);\n          selectionChanged = true;\n        }\n      } else {\n        if (this.config.selectedItems[0] === item) {\n          if (!this.config.dblClick) {\n            this.config.selectedItems = [];\n            selectionChanged = true;\n          }\n        } else {\n          this.config.selectedItems = [item];\n          selectionChanged = true;\n        }\n      }\n\n      if (selectionChanged === true) {\n        this.onSelect.emit({\n          item: item\n        } as ListEvent);\n        this.onSelectionChange.emit({\n          item: item,\n          selectedItems: this.config.selectedItems\n        } as ListEvent);\n      }\n    }\n    this.onClick.emit({\n      item: item\n    } as ListEvent);\n  }\n\n  private dblClick($event: MouseEvent, item: any): void {\n    // Ignore disabled item clicks\n    if (this.config.dblClick === true && item.disabled !== true) {\n      this.onDblClick.emit({\n        item: item\n      } as ListEvent);\n    }\n  }\n\n  // Toggle\n\n  private closeExpandArea(item: any): void {\n    item.expandId = undefined;\n    item.expanded = false;\n  }\n\n  private toggleExpandArea(item: any): void {\n    // Item may already be open due to compound expansion\n    if (item.expanded && item.expandId !== undefined) {\n      item.expandId = undefined;\n      return;\n    }\n    item.expandId = undefined;\n    item.expanded = !item.expanded;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}