{"version":3,"file":"sort-array.pipe.js","sourceRoot":"","sources":["../../../../../build/src/app/pipe/sort-array/sort-array.pipe.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,IAAI,EAAiB,MAAM,eAAe,CAAC;AACpD,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,MAAM,CAAC;AAE3C;;;;;;;GAOG;AAEH;IAAA;IAgCA,CAAC;IA/BC;;;;;;;OAOG;IACH,iCAAS,GAAT,UAAU,GAAe,EAAE,IAAS,EAAE,UAA2B;QAA3B,2BAAA,EAAA,kBAA2B;QAC/D,EAAE,CAAC,CAAC,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC;QACT,CAAC;QACD,IAAM,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,UAAC,CAAM,EAAE,CAAM;YAC7B,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;YAChB,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;YAEhB,wDAAwD;YACxD,EAAE,CAAC,CAAC,CAAC,KAAK,SAAS,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpC,CAAC,GAAG,KAAK,CAAC;YACZ,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,SAAS,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC1C,CAAC,GAAG,EAAE,CAAC;YACT,CAAC;YACD,EAAE,CAAC,CAAC,CAAC,KAAK,SAAS,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpC,CAAC,GAAG,KAAK,CAAC;YACZ,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,SAAS,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC1C,CAAC,GAAG,EAAE,CAAC;YACT,CAAC;YACD,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC;IA/BU,aAAa;QADzB,IAAI,CAAC,EAAE,IAAI,EAAE,WAAW,EAAC,CAAC;OACd,aAAa,CAgCzB;IAAD,oBAAC;CAAA,AAhCD,IAgCC;SAhCY,aAAa","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport { isBoolean, isString } from 'util';\n\n/**\n * Sort array pipe\n *\n * This is currently used with the pin feature of the list component\n *\n * Example:\n * <div *ngFor=\"let item of (items | sortPin: 'name': true)\">\n */\n@Pipe({ name: 'sortArray'})\nexport class SortArrayPipe implements PipeTransform {\n  /**\n   * Sort array by property\n   *\n   * @param {Array<any>} arr Array to sort\n   * @param prop Property name to sort by\n   * @param {boolean} descending True to sort descending\n   * @returns {any} Returns sorted array\n   */\n  transform(arr: Array<any>, prop: any, descending: boolean = false): any {\n    if (arr === undefined) {\n      return;\n    }\n    const m = descending ? -1 : 1;\n    return arr.sort((a: any, b: any): number => {\n      let x = a[prop];\n      let y = b[prop];\n\n      // Resolve undefined values for more predicable behavior\n      if (x === undefined && isBoolean(y)) {\n        x = false;\n      } else if (x === undefined && isString(y)) {\n        x = '';\n      }\n      if (y === undefined && isBoolean(x)) {\n        y = false;\n      } else if (y === undefined && isString(x)) {\n        y = '';\n      }\n      return (x === y) ? 0 : (x < y) ? -1 * m : 1 * m;\n    });\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}