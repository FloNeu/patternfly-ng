{"version":3,"file":"sort.component.js","sourceRoot":"","sources":["../../../../src/app/sort/sort.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport * as _ from 'lodash';\n\nimport { SortConfig } from './sort-config';\nimport { SortField } from './sort-field';\nimport { SortEvent } from './sort-event';\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-sort',\n  styleUrls: ['./sort.component.less'],\n  templateUrl: './sort.component.html'\n})\nexport class SortComponent implements OnInit {\n  @Input() config: SortConfig;\n\n  @Output('onChange') onChange = new EventEmitter();\n\n  show: boolean = false;\n  currentField: SortField;\n  prevConfig: SortConfig;\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n    this.setupConfig();\n  }\n\n  ngDoCheck(): void {\n    // Do a deep compare on config\n    if (!_.isEqual(this.config, this.prevConfig)) {\n      this.setupConfig();\n    }\n  }\n\n  setupConfig(): void {\n    if (this.config === undefined) {\n      this.config = {} as SortConfig;\n    }\n    this.prevConfig = _.cloneDeep(this.config);\n\n    if (this.config && this.config.fields && this.config.fields.length > 0) {\n      if (this.currentField === undefined) {\n        this.currentField = this.config.fields[0];\n      }\n      if (this.config.isAscending === undefined) {\n        this.config.isAscending = true;\n      }\n    }\n  }\n\n  toggle(): void {\n    this.show = !this.show;\n  }\n\n  open(): void {\n    this.show = true;\n  }\n\n  close(): void {\n    this.show = false;\n  }\n\n  getSortIconClass(): string {\n    let iconClass: string;\n    if (this.currentField && this.currentField.sortType\n        && this.currentField.sortType === 'numeric') {\n      if (this.config.isAscending) {\n        iconClass = 'fa fa-sort-numeric-asc';\n      } else {\n        iconClass = 'fa fa-sort-numeric-desc';\n      }\n    } else {\n      if (this.config.isAscending) {\n        iconClass = 'fa fa-sort-alpha-asc';\n      } else {\n        iconClass = 'fa fa-sort-alpha-desc';\n      }\n    }\n    return iconClass;\n  }\n\n  onChangeDirection(): void {\n    this.config.isAscending = !this.config.isAscending;\n    this.onChange.emit({\n      field: this.currentField,\n      isAscending: this.config.isAscending\n    } as SortEvent);\n    this.toggle();\n  }\n\n  selectField(field: SortField): void {\n    this.currentField = field;\n    this.onChange.emit({\n      field: this.currentField,\n      isAscending: this.config.isAscending\n    } as SortEvent);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}