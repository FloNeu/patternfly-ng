{"version":3,"file":"filter-results.component.js","sourceRoot":"","sources":["../../../../src/app/filters/filter-results.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { Filter } from './filter';\nimport { FilterConfig } from './filter-config';\n\nimport { cloneDeep, isEqual } from 'lodash';\n\n/**\n * Component for the filter results\n */\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-filter-results',\n  styleUrls: ['./filter-results.component.less'],\n  templateUrl: './filter-results.component.html'\n})\nexport class FilterResultsComponent implements OnInit {\n  @Input() config: FilterConfig;\n\n  @Output('onClear') onClear = new EventEmitter();\n\n  prevConfig: FilterConfig;\n\n  constructor() {\n  }\n\n  // Initialization\n\n  ngOnInit(): void {\n    this.setupConfig();\n  }\n\n  ngDoCheck(): void {\n    // Do a deep compare on config\n    if (!isEqual(this.config, this.prevConfig)) {\n      this.setupConfig();\n    }\n  }\n\n  setupConfig(): void {\n    if (this.config === undefined) {\n      this.config = {} as FilterConfig;\n    }\n    this.prevConfig = cloneDeep(this.config);\n\n    if (this.config && this.config.appliedFilters === undefined) {\n      this.config.appliedFilters = [];\n    }\n    if (this.config && this.config.resultsCount === undefined) {\n      this.config.resultsCount = 0;\n    }\n    if (this.config && this.config.selectedCount === undefined) {\n      this.config.selectedCount = 0;\n    }\n    if (this.config && this.config.totalCount === undefined) {\n      this.config.totalCount = 0;\n    }\n  }\n\n  // Result functions\n\n  clearFilter(filter: Filter): void {\n    let newFilters: Filter[] = [];\n    this.config.appliedFilters.forEach((appliedFilter) => {\n      if (appliedFilter.field.title !== filter.field.title\n          || appliedFilter.value !== filter.value) {\n        newFilters.push(appliedFilter);\n      }\n    });\n    this.config.appliedFilters = newFilters;\n    this.onClear.emit(this.config.appliedFilters);\n  }\n\n  clearAllFilters(): void {\n    this.config.appliedFilters = [];\n    this.onClear.emit(this.config.appliedFilters);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
